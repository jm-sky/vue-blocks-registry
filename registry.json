{
  "$schema": "./registry-schema.json",
  "name": "vue-blocks-registry",
  "version": "0.1.0",
  "description": "Modular registry system for Vue 3 projects with reusable components, features, and bundles",
  "homepage": "https://github.com/jm-sky/vue-blocks-registry",
  "items": [
    {
      "name": "utils",
      "type": "registry:lib",
      "title": "Utils",
      "description": "Utility functions for class name merging and conditional styling",
      "categories": ["lib", "utils"],
      "files": [
        {
          "path": "lib/utils.ts",
          "type": "registry:lib"
        }
      ],
      "dependencies": [
        "clsx",
        "tailwind-merge"
      ],
      "registryDependencies": []
    },
    {
      "name": "button",
      "type": "registry:ui",
      "title": "Button",
      "description": "A highly customizable button component with multiple variants, sizes, and special vibe effects for enhanced user experience",
      "categories": ["ui", "form"],
      "files": [
        {
          "path": "components/ui/button/Button.vue",
          "type": "registry:ui"
        },
        {
          "path": "components/ui/button/index.ts",
          "type": "registry:ui"
        }
      ],
      "dependencies": [
        "reka-ui",
        "class-variance-authority"
      ],
      "registryDependencies": [
        "utils"
      ]
    },
    {
      "name": "label",
      "type": "registry:ui",
      "title": "Label",
      "description": "Accessible label component for form elements",
      "categories": ["ui", "form"],
      "files": [
        {
          "path": "components/ui/label/Label.vue",
          "type": "registry:ui"
        },
        {
          "path": "components/ui/label/index.ts",
          "type": "registry:ui"
        }
      ],
      "dependencies": [
        "reka-ui"
      ],
      "registryDependencies": [
        "utils"
      ]
    },
    {
      "name": "input",
      "type": "registry:ui",
      "title": "Input",
      "description": "Text input component with various types support",
      "categories": ["ui", "form"],
      "files": [
        {
          "path": "components/ui/input/Input.vue",
          "type": "registry:ui"
        },
        {
          "path": "components/ui/input/index.ts",
          "type": "registry:ui"
        }
      ],
      "dependencies": [],
      "registryDependencies": [
        "utils"
      ]
    },
    {
      "name": "form",
      "type": "registry:ui",
      "title": "Form",
      "description": "Form components with vee-validate integration for validation",
      "categories": ["ui", "form"],
      "files": [
        {
          "path": "components/ui/form/Form.vue",
          "type": "registry:ui"
        },
        {
          "path": "components/ui/form/FormControl.vue",
          "type": "registry:ui"
        },
        {
          "path": "components/ui/form/FormDescription.vue",
          "type": "registry:ui"
        },
        {
          "path": "components/ui/form/FormField.vue",
          "type": "registry:ui"
        },
        {
          "path": "components/ui/form/FormItem.vue",
          "type": "registry:ui"
        },
        {
          "path": "components/ui/form/FormLabel.vue",
          "type": "registry:ui"
        },
        {
          "path": "components/ui/form/FormMessage.vue",
          "type": "registry:ui"
        },
        {
          "path": "components/ui/form/index.ts",
          "type": "registry:ui"
        },
        {
          "path": "components/ui/form/injectionKeys.ts",
          "type": "registry:ui"
        },
        {
          "path": "components/ui/form/useFormField.ts",
          "type": "registry:ui"
        }
      ],
      "dependencies": [
        "vee-validate"
      ],
      "registryDependencies": [
        "utils",
        "label"
      ]
    },
    {
      "name": "config",
      "type": "registry:lib",
      "title": "Config",
      "description": "Application configuration with environment variables and JWT storage key",
      "categories": ["lib", "config"],
      "files": [
        {
          "path": "shared/config/config.ts",
          "type": "registry:lib"
        }
      ],
      "dependencies": [],
      "registryDependencies": []
    },
    {
      "name": "type-guards",
      "type": "registry:lib",
      "title": "Type Guards",
      "description": "TypeScript type guards for validation error handling with Axios",
      "categories": ["lib", "utils", "types"],
      "files": [
        {
          "path": "shared/utils/typeGuards.ts",
          "type": "registry:lib"
        }
      ],
      "dependencies": [
        "axios"
      ],
      "registryDependencies": []
    },
    {
      "name": "http-client",
      "type": "registry:lib",
      "title": "API Client",
      "description": "Axios API client with base configuration and automatically applied auth interceptor",
      "categories": ["lib", "services"],
      "files": [
        {
          "path": "shared/services/apiClient.ts",
          "type": "registry:lib"
        },
        {
          "path": "shared/services/auth.interceptor.ts",
          "type": "registry:lib"
        }
      ],
      "dependencies": [
        "axios"
      ],
      "registryDependencies": [
        "config"
      ]
    },
    {
      "name": "auth-types",
      "type": "registry:lib",
      "title": "Auth Types",
      "description": "TypeScript types and interfaces for authentication module",
      "categories": ["lib", "types", "auth"],
      "files": [
        {
          "path": "modules/auth/types/user.ts",
          "type": "registry:lib"
        }
      ],
      "dependencies": [],
      "registryDependencies": []
    },
    {
      "name": "auth-store",
      "type": "registry:lib",
      "title": "Auth Store",
      "description": "Pinia store for authentication state management with localStorage persistence",
      "categories": ["lib", "store", "auth"],
      "files": [
        {
          "path": "modules/auth/store/useAuthStore.ts",
          "type": "registry:lib"
        }
      ],
      "dependencies": [
        "pinia",
        "vue"
      ],
      "registryDependencies": [
        "config",
        "auth-types"
      ]
    },
    {
      "name": "auth-service",
      "type": "registry:lib",
      "title": "Auth Service",
      "description": "Authentication API service with login, register, password reset and change methods",
      "categories": ["lib", "services", "auth"],
      "files": [
        {
          "path": "modules/auth/services/authService.ts",
          "type": "registry:lib"
        }
      ],
      "dependencies": [],
      "registryDependencies": [
        "http-client",
        "auth-types"
      ]
    },
    {
      "name": "auth-validation",
      "type": "registry:lib",
      "title": "Auth Validation Schemas",
      "description": "Zod validation schemas for authentication forms (login, register, password reset, change)",
      "categories": ["lib", "validation", "auth"],
      "files": [
        {
          "path": "modules/auth/validation/login.schema.ts",
          "type": "registry:lib"
        },
        {
          "path": "modules/auth/validation/register.schema.ts",
          "type": "registry:lib"
        },
        {
          "path": "modules/auth/validation/forgotPassword.schema.ts",
          "type": "registry:lib"
        },
        {
          "path": "modules/auth/validation/resetPassword.schema.ts",
          "type": "registry:lib"
        },
        {
          "path": "modules/auth/validation/changePassword.schema.ts",
          "type": "registry:lib"
        }
      ],
      "dependencies": [
        "zod"
      ],
      "registryDependencies": []
    },
    {
      "name": "auth-composables",
      "type": "registry:lib",
      "title": "Auth Composables",
      "description": "Vue composables for authentication (useAuth, useLogout)",
      "categories": ["lib", "composables", "auth"],
      "files": [
        {
          "path": "modules/auth/composables/useAuth.ts",
          "type": "registry:lib"
        },
        {
          "path": "modules/auth/composables/useLogout.ts",
          "type": "registry:lib"
        }
      ],
      "dependencies": [
        "vue-router"
      ],
      "registryDependencies": [
        "auth-store",
        "auth-service",
        "auth-types"
      ]
    },
    {
      "name": "auth-forms",
      "type": "registry:ui",
      "title": "Auth Forms",
      "description": "Authentication form components (LoginForm, RegisterForm, LogoutButton)",
      "categories": ["ui", "form", "auth"],
      "files": [
        {
          "path": "modules/auth/components/LoginForm.vue",
          "type": "registry:ui"
        },
        {
          "path": "modules/auth/components/RegisterForm.vue",
          "type": "registry:ui"
        },
        {
          "path": "modules/auth/components/LogoutButton.vue",
          "type": "registry:ui"
        }
      ],
      "dependencies": [
        "vee-validate",
        "@vee-validate/zod",
        "vue-router"
      ],
      "registryDependencies": [
        "button",
        "auth-validation",
        "auth-composables",
        "type-guards"
      ]
    },
    {
      "name": "auth-pages",
      "type": "registry:page",
      "title": "Auth Pages",
      "description": "Authentication pages (Login, Register, Forgot/Reset/Change Password)",
      "categories": ["page", "auth"],
      "files": [
        {
          "path": "modules/auth/pages/LoginPage.vue",
          "type": "registry:page"
        },
        {
          "path": "modules/auth/pages/RegisterPage.vue",
          "type": "registry:page"
        },
        {
          "path": "modules/auth/pages/ForgotPasswordPage.vue",
          "type": "registry:page"
        },
        {
          "path": "modules/auth/pages/ResetPasswordPage.vue",
          "type": "registry:page"
        },
        {
          "path": "modules/auth/pages/ChangePasswordPage.vue",
          "type": "registry:page"
        }
      ],
      "dependencies": [
        "vee-validate",
        "@vee-validate/zod",
        "vue-router"
      ],
      "registryDependencies": [
        "auth-forms",
        "auth-validation",
        "auth-service",
        "button",
        "type-guards"
      ]
    },
    {
      "name": "layouts",
      "type": "registry:layout",
      "title": "App Layouts",
      "description": "Application layouts (AuthenticatedLayout for logged users, DefaultLayout for public pages)",
      "categories": ["layout"],
      "files": [
        {
          "path": "app/layouts/AuthenticatedLayout.vue",
          "type": "registry:layout"
        },
        {
          "path": "app/layouts/DefaultLayout.vue",
          "type": "registry:layout"
        }
      ],
      "dependencies": [
        "vue-router"
      ],
      "registryDependencies": [
        "auth-store",
        "auth-forms"
      ]
    },
    {
      "name": "alert",
      "type": "registry:ui",
      "title": "Alert",
      "description": "Alert component for displaying important messages with variants",
      "categories": ["ui", "feedback"],
      "files": [
        {
          "path": "components/ui/alert/Alert.vue",
          "type": "registry:ui"
        },
        {
          "path": "components/ui/alert/AlertDescription.vue",
          "type": "registry:ui"
        },
        {
          "path": "components/ui/alert/AlertTitle.vue",
          "type": "registry:ui"
        },
        {
          "path": "components/ui/alert/index.ts",
          "type": "registry:ui"
        }
      ],
      "dependencies": [
        "class-variance-authority"
      ],
      "registryDependencies": [
        "utils"
      ]
    },
    {
      "name": "dark-mode",
      "type": "registry:feature",
      "title": "Dark Mode",
      "description": "Dark mode toggle component with composable for theme management",
      "categories": ["feature", "ui"],
      "files": [
        {
          "path": "shared/components/DarkModeToggle.vue",
          "type": "registry:ui"
        },
        {
          "path": "shared/composables/useDarkMode.ts",
          "type": "registry:lib"
        }
      ],
      "dependencies": [
        "@vueuse/core"
      ],
      "registryDependencies": []
    },
    {
      "name": "authFeat",
      "type": "registry:bundle",
      "title": "Authentication Feature Bundle",
      "description": "Complete authentication feature with store, services, composables, and validation (no UI)",
      "categories": ["bundle", "auth"],
      "files": [],
      "dependencies": [],
      "registryDependencies": [
        "config",
        "type-guards",
        "http-client",
        "auth-types",
        "auth-store",
        "auth-service",
        "auth-validation",
        "auth-composables"
      ]
    },
    {
      "name": "authFull",
      "type": "registry:bundle",
      "title": "Complete Authentication Module",
      "description": "Full authentication module with pages, forms, layouts, store, services, and all dependencies",
      "categories": ["bundle", "auth"],
      "files": [],
      "dependencies": [],
      "registryDependencies": [
        "authFeat",
        "auth-forms",
        "auth-pages",
        "layouts"
      ]
    }
  ]
}
